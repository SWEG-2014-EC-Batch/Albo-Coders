#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
using namespace std;

#ifdef _WIN32
#include <windows.h>
#else
#include <unistd.h>
#endif

void customPressAnyKey() {
    cout << "Press any key to continue...";
    cin.ignore(); // Ignore all characters until a newline
    cin.get(); // Wait for a key press
}

// Function to mimic Sleep on both Windows and Unix-based systems
void customSleep(int milliseconds) {
    #ifdef _WIN32
    Sleep(milliseconds);
    #else
    usleep(milliseconds * 1000);  // usleep uses microseconds
    #endif
    customPressAnyKey();
}

// Function to clear the console screen on both Windows and Unix-based systems
void customClearScreen() {
    #ifdef _WIN32
    system("cls");
    #else
    system("clear");
    #endif
}

const int MAX_ROWS = 5;
const int MAX_COLS = 10;
const double FARE_AMOUNT = 20.0;

struct Customer {
    int customer_ID;
    string Fname;
    string Lname;
    int age;
    string gender;
    string phone_number;
    bool hasCriminalRecord;
    int loyaltyPoints;
    double prepaidBalance;
};

bool seats[MAX_ROWS][MAX_COLS] = {false};
Customer customers[MAX_ROWS * MAX_COLS];
int numCustomers = 0;

void displayAvailableSeats() {
    customClearScreen();
    cout << "Seating Chart:\n";
    for (int row = 0; row < MAX_ROWS; row++) {
        for (int col = 0; col < MAX_COLS; col++) {
            if (seats[row][col]) {
                cout << "[ X ] ";
            } else {
                cout << "[    ] ";
            }
        }
        cout << endl;
    }
}

void generateTicket(int row, int col, const Customer& customer) {
    cout << "\nTicket Information:\n";
    cout << "------------------------\n";
    cout << "Seat: Row " << row << ", Col " << col << "\n";
    cout << "Customer ID: " << customer.customer_ID << "\n";
    cout << "Name: " << customer.Fname << " " << customer.Lname << "\n";
    cout << "Age: " << customer.age << "\n";
    cout << "Gender: " << customer.gender << "\n";
    cout << "Phone Number: " << customer.phone_number << "\n";
    cout << "------------------------\n";
}

void reserveSeat(Customer& customer) {
    int row, col;

    displayAvailableSeats();

    cout << "Enter the row and column to reserve (e.g., 2 3): ";
    cin >> row >> col;

    if (row >= 0 && row < MAX_ROWS && col >= 0 && col < MAX_COLS) {
        if (!seats[row][col]) {
            if (customer.prepaidBalance >= FARE_AMOUNT) {
                customer.prepaidBalance -= FARE_AMOUNT;
                seats[row][col] = true;
                cout << "Seat at Row " << row << ", Col " << col << " has been reserved.\n";
                generateTicket(row, col, customer);
            } else {
                cout << "Insufficient prepaid balance to reserve the seat.\n";
            }
        } else {
            cout << "Invalid seat selection. The seat is already occupied.\n";
        }
    } else {
        cout << "Invalid seat selection.\n";
    }
    customSleep(2000);
}

bool isSeatAvailable(int row, int col) {
    if (row >= 0 && row < MAX_ROWS && col >= 0 && col < MAX_COLS) {
        return !seats[row][col];
    }
    return false;
}

void displaySeatingChart() {
    cout << "Seating Chart:\n";
    for (int row = 0; row < MAX_ROWS; row++) {
        for (int col = 0; col < MAX_COLS; col++) {
            if (seats[row][col]) {
                cout << "X ";
            } else {
                cout << "O ";
            }
        }
        cout << endl;
    }
}
void add_customer() {
    cout << "PLEASE FILL IN THE DATA.\n";

    Customer info;
    info.customer_ID = numCustomers + 1;

    cout << "First Name: ";
    cin >> info.Fname;

    cout << "Last Name: ";
    cin >> info.Lname;

    cout << "Age: ";
    cin >> info.age;

    cout << "Gender: ";
    cin >> info.gender;

    cout << "Phone number: ";
    cin >> info.phone_number;

    cout << "Prepaid Balance: ";
    cin >> info.prepaidBalance;

    info.hasCriminalRecord = false;
    info.loyaltyPoints = 0;

    customers[numCustomers] = info;
    numCustomers++;
}

void search_customer() {
    int ID, count = 0;
    cout << "Enter the customer ID you want to search: ";
    cin >> ID;

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].customer_ID == ID) {
            cout << "Customer Found:\n";
            cout << "Customer ID: " << customers[i].customer_ID << endl;
            cout << "Name: " << customers[i].Fname << " " << customers[i].Lname << endl;
            cout << "Age: " << customers[i].age << endl;
            cout << "Gender: " << customers[i].gender << endl;
            cout << "Phone number: " << customers[i].phone_number << endl;
            cout << "Prepaid Balance: " << customers[i].prepaidBalance << endl;
            count++;
            break;
        }
    }

    if (count == 0) {
        cout << "Customer with customer ID " << ID << " not found.\n";
    }
    customSleep(2000);
}

void delete_customer() {
    int ID, count = 0;
    cout << "DELETE CUSTOMER" << endl;
    cout << "Enter customer's ID you want to delete: ";
    cin >> ID;

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].customer_ID == ID) {
            for (int j = i; j < numCustomers - 1; j++) {
                customers[j] = customers[j + 1];
            }
            numCustomers--;
            count++;
            break;
        }
    }

    if (count == 0) {
        cout << "Customer record not found!" << endl;
    } else {
        cout << "Customer record deleted successfully!" << endl;
    }
    customSleep(2000);
}


void calculate_price() {
    cout << "Calculate price function called (placeholder).\n";
}

void display_all_customer() {
    customClearScreen();
    cout << "-----------------------------------------------------------------------------------------------------------------------------\n";
    cout << setw(12) << "CUSTOMERID" << setw(20) << "FIRST-NAME" << setw(20) << "LAST-NAME" << setw(8) << "AGE" << setw(10) << "GENDER" << setw(18) << "PHONE NUMBER" << setw(20) << "PREPAID BALANCE\n";
    cout << "-----------------------------------------------------------------------------------------------------------------------------\n";

    for (int i = 0; i < numCustomers; i++) {
        cout << setw(12) << customers[i].customer_ID << setw(20) << customers[i].Fname << setw(20) << customers[i].Lname << setw(8) << customers[i].age << setw(10) << customers[i].gender << setw(18) << customers[i].phone_number << setw(20) << customers[i].prepaidBalance << endl;
    }

    customSleep(2000);
}


bool checkTravelerLegality(const Customer& customer) {
    if (customer.age < 18) {
        cout << "Sorry, " << customer.Fname << ", you must be at least 18 years old to travel.\n";
        return false;
    } else if (customer.hasCriminalRecord) {
        cout << "Sorry, " << customer.Fname << ", you are not allowed to travel due to a criminal record.\n";
        return false;
    }
    return true;
}

void updateLoyaltyPoints(Customer& customer, int points) {
    customer.loyaltyPoints += points;
    cout << customer.Fname << " earned " << points << " loyalty points. Total points: " << customer.loyaltyPoints << endl;
}
void generateReceipt(const Customer& customer, int pointsEarned) {
    cout << "\nReceipt Information:\n";
    cout << "------------------------\n";
    cout << "Customer ID: " << customer.customer_ID << "\n";
    cout << "Name: " << customer.Fname << " " << customer.Lname << "\n";
    cout << "Phone Number: " << customer.phone_number << "\n";
    cout << "Points Earned: " << pointsEarned << "\n";
    cout << "------------------------\n";
}
